#+TITLE: Pythonic
#+DATE: 2021-04-09T20:54:29+02:00

* The Zen of Python

#+begin_quote
Beautiful is better than ugly.\\
Explicit is better than implicit.\\
Simple is better than complex.\\
Complex is better than complicated.\\
Flat is better than nested.\\
Sparse is better than dense.\\
Readability counts.\\
Special cases aren't special enough to break the rules.\\
Although practicality beats purity.\\
Errors should never pass silently.\\
Unless explicitly silenced.\\
In the face of ambiguity, refuse the temptation to guess.\\
There should be one-- and preferably only one --obvious way to do it.\\
Although that way may not be obvious at first unless you're Dutch.\\
Now is better than never.\\
Although never is often better than *right* now.\\
If the implementation is hard to explain, it's a bad idea.\\
If the implementation is easy to explain, it may be a good idea.\\
Namespaces are one honking great idea -- let's do more of those!


                                   --------- Tim Peters
#+end_quote

* [[https://effectivepython.com/][Effective Python]]

** Pythonic Thinking

1. Use Python 3; Avoid Python 2.
2. Follow [[https://www.python.org/dev/peps/pep-0008/][PEP8]] style guide.
3. Understand differences between =str= and =bytes=.
4. Learn =str.format= but prefer [[https://realpython.com/python-string-formatting/#3-string-interpolation-f-strings-python-36][f-Strings]] (string interpolation).
5. Wrap complex logic into helper functions.
6. Prefer unpacking over indexing.
7. Prefer [[https://docs.python.org/3/library/functions.html#enumerate][=enumerate=]] over [[https://docs.python.org/3/library/functions.html#func-range][=range=]].
8. Use [[https://docs.python.org/3/library/functions.html#zip][=zip=]] to process iterators in parallel.
9. Avoid =else= blocks after =for= and =while= loops.
10. Prevent repetition with [[https://realpython.com/lessons/assignment-expressions/][assignment expressions]] (walrus operator =:==).

** List and Dictionaries

11. [@11] Know how to *slice* sequences.
12. Avoid *striding* and *slicing* in a single expression.
13. Prefer [[https://www.python.org/dev/peps/pep-3132/][catch-all unpacking]] (starred expression) over slicing
14. Sort by complex criteria using =key= parameters
15. Be cautious when relying on the =dict= insert order
16. Prefer =get= over =in= and =KeyError= to handle missing dictionary keys.
17. Prefer =defaultdict= over =setdefault= to handle missing items in internal states.
18. Construct key-dependent default values with =__missing__=.

** Functions

19. [@19] Never unpack more than three variables when functions return multiple values.
20. Prefer raising exceptions to returning =None=.
21. Know how closures interact with variable scope.
22. Reduce visual noise with [[https://realpython.com/python-kwargs-and-args/][variable positional arguments]] (/varargs/, /starargs/)
23. Provide optional behavior with keyword arguments
24. Use =None= and [[https://realpython.com/documenting-python-code/][Docstrings]] to specify dynamic default arguments
25. Enforce clarify with keyword-only and [[https://realpython.com/lessons/positional-only-arguments/][positional-only arguments]]
26. Define function decorators with =functools.wraps=

** Comprehensions and Generators

27. [@27] Use comprehensions instead of =map= and =filter=
28. Avoid more than two control subexpressions in comprehensions
29. Avoid repeated work in comprehensions by using assignment expressions (see 17.)
30. Consider generators instead of returning lists
31. Be defensive when iterating over arguments
32. Consider [[https://realpython.com/introduction-to-python-generators/#building-generators-with-generator-expressions][generator expressions]] for large list comprehensions
33. Compose multiple generators with =yield from=
34. Avoid injecting data into generators with =send=
35. Avoid causing state transitions in generators with =throw=
36. Consider [[https://docs.python.org/3/library/itertools.html][=itertools=]] and [[https://github.com/more-itertools/more-itertools][=more-itertools=]] for working with iterators and generators
    a. linking iterators together
    b. filtering items from an iterators
    c. produce combinations of items from iterators
37. abc
